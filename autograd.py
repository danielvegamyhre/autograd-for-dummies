class Scalar(object):
    '''Represents a scalar value and its gradient.'''

    def __init__(self, value, parent_nodes=[], prev_op=None):
        assert isinstance(val, (float, int)), "node value must be a scalar"
        self.value = value
        self.parent_nodes = parent_nodes
        self.prev_op = None # operator which created this node (i.e. add, sub, mul, etc.)
        self.grad = 0       # stores gradient of output with respect to self
        self.grad_wrt = {}  # stores gradients of self with respect to each parent
                            # (wrt = "with respect to")

    def __repr__(self):
        return f'Scalar(value={self.value:.2f}, grad={self.grad:.2f})'

    # self + other_node
    def __add__(self, other_node):
        if not isinstance(other_node, Scalar):
            other_node = Scalar(other_node)

        # create output node generated by adding self + other node
        output_node = Scalar(self.value + other_node.value, [self, other_node], '+')

        # gradient of output with respect to self is 1
        self.grad_wrt[self] = 1

        # gradient of output with respect to other node is 1
        self.grad_wrt[other_node] = 1

        return output_node

    # other_node + self
    def __radd__(self, other_node):
        # NOTE: we can use __add__ here because the gradients of the
        # output node with respect to self and other_node will both be 1
        return self.__add__(other_node)

    # self - other_node
    def __sub__(self, other_node):
        if not isinstance(other_node, Scalar):
            other_node = Scalar(other_node)

        # create output node generated by adding self + other node
        output_node = Scalar(self.value - other_node.value, [self, other_node], '-')

        # gradient of output with respect to self is 1
        self.grad_wrt[self] = 1

        # gradient of output with respect to other node is -1
        self.grad_wrt[other_node] = -1

        return output_node

    # other_node - self
    def __rsub__(self, other_node):
        # NOTE: we CANNOT use __sub__ here because the element
        # being subtracted will have a gradient of -1, so order matters.
        if not isinstance(other_node, Scalar):
            other_node = Scalar(other_node)

        # create output node generated by adding self + other node
        output_node = Scalar(other_node.value - self.value, [self, other_node], '-')

        # gradient of output with respect to self is 1
        self.grad_wrt[self] = -1

        # gradient of output with respect to other node is -1
        self.grad_wrt[other_node] = 1

        return output_node
